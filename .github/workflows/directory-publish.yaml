name: metadata generation
on:
  workflow_dispatch:
    inputs:
      repo:
        required: true
        description: 'The repository to generate data for'
      tag:
        required: true
        description: 'The tag to generate data for'
      container:
        required: false
        description: 'public container ID to include in the published app page'
  issues: 
    types: [opened, reopened]

jobs:
  generate:
    name: 'pull metadata from app repo and generate json and html'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./main
    steps:
      - name: Check out publisher repository
        uses: actions/checkout@v3
        with:
          path: main
          
      - name: setup python
        uses: actions/setup-python@v4
        
      - name: set repo address and tag from submitted issue
        if: github.event_name == 'issues'
        run: |
          if [[ ${{ github.event.issue.title }} == "APP_SUBMISSION" ]] ; then
            apprepo=$(echo "${{ github.event.issue.body }}" | sed -Ene "s/^NAME:(.*)$/\1/p" | tr -d ' \n')
            apptag=$(echo "${{ github.event.issue.body }}" | sed -Ene "s/^TAG:(.*)$/\1/p" | tr -d ' \n')
            echo "${apprepo}::${apptag}"
            if [ ! -z ${apprepo} ] && [ ! -z ${apptag} ]; then 
              appcontainer=$(echo "${{ github.event.issue.body }}" | sed -Ene "s/\* TAG:(.*)$/\1/p" | tr -d ' \n')
            else
              echo "empty *${apprepo}* *${apptag}*"
              exit 1
            fi
          else
            echo "wrong title ${{ github.event.issue.title }}"
            exit 1
          fi
          echo "apprepo=$apprepo" >> $GITHUB_ENV
          echo "apptag=$apptag" >> $GITHUB_ENV
          echo "appcontainer=$appcontainer" >> $GITHUB_ENV
          
      
      - name: set repo address and tag from dispatch input
        if: github.event_name == 'workflow_dispatch'
        run: |
            echo "apprepo=${{ github.event.inputs.repo }}" >> $GITHUB_ENV
            echo "apptag=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
            echo "appcontainer=${{ github.event.inputs.container }}" >> $GITHUB_ENV
        
      - name: Check out target app repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.apprepo }}
          ref: ${{ env.apptag }}
          path: app
        
      - name: install clams sdk 
        run: |
          pip install clams-python==0.6.0
          
      - name: generate app metadata (dir = app repo -> metadata.json file)
        working-directory: ./app
        run: |
          python ./metadata.py > ../main/metadata.json
          
      - name: prep envvar for shortname and version
        id: appname
        run: |
          app_id=$( jq -r '.identifier' metadata.json )
          echo "app_fullid=$app_id" >> $GITHUB_ENV
          echo "app_shortname=$( echo $app_id | rev | cut -d'/' -f2 | rev )" >> $GITHUB_ENV
          echo "app_version=$( echo $app_id | rev | cut -d'/' -f1 | rev )" >> $GITHUB_ENV
          
#      - name: generate html of app metadata 
      - name: copy html and json to proper location
        run: |
          dir="docs/${{ env.app_shortname }}/${{ env.app_version }}"
          mkdir -p $dir
          cp metadata.json $dir/

#      - name: append app metadata to BIG json for API access
      - name: commit docs and push to new branch
        run: |
          branch="${{ env.app_shortname }}-${{ env.app_version }}"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b "$branch"
          git add docs
          git commit -m "adding metadata of $branch"
          git push origin "$branch"
#      - name: start a new pr
